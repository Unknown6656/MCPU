<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// maybe (hopefully) this code file will be obsolete in C# 8
// Autogenerated  <#=$"{DateTime.Now:yyyy-MM-dd HH:mm:ss:ffffff}" #>

using System;

namespace MCPU.Compiler
{
<#
char BigC(int i) => (char)('A' + i);
char SmallC(int i) => (char)('a' + i);

for (int i = 2; i <= 26; i++)
{
	string type_str = string.Join(", ", from c in Enumerable.Range(0, i) select BigC(c));
	string func_str = string.Join(", ", from j in Enumerable.Range(0, i) select $"Func<{BigC(j)}, _> {SmallC(j)}");
#>

	/// <summary>
    /// A generic discriminated union with <#=i#> different type cases
    /// </summary>
	public abstract class Union<#=""#><<#=type_str#>>
    {
        public abstract _ Match<_>(<#=func_str#>);

		private Union<#=""#>() { }

<#
for (int j = 0; j < i; j++)
{
#>

		public sealed class Case<#=j + 1#>
			: Union<#=""#><<#=type_str#>>
		{
			public <#=BigC(j)#> Item { get; }
			
            public Case<#=j + 1#>(<#=BigC(j)#> item)
				: base() => Item = item;

			public override _ Match<_>(<#=func_str#>) => <#=SmallC(j)#>(Item);

			public static implicit operator <#=BigC(j)#>(Case<#=j + 1#> c) => c.Item;
		}
<# } #>
	}
<# } #>
}
