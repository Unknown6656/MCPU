<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System;

// Autogenerated  <#=$"{DateTime.Now:yyyy-MM-dd HH:mm:ss:ffffff}   {TimeZoneInfo.Local.DisplayName}" #>

namespace MCPU
{
	using Instructions;

    /// <summary>
    /// Contains all known OP codes
    /// </summary>
    [DebuggerStepThrough, DebuggerNonUserCode, Serializable, GeneratedCode("Visual Studio T4 Template Generator", "15.0")]
	public static class OPCodes
	{
<#
const bool USE_APPDOMAIN = false;
string base_path = Host.ResolvePath(@".\bin\Debug") + @"\mcpu.corelib";
AppDomain domain = null;
Assembly asm;

if (USE_APPDOMAIN)
{
	domain = AppDomain.CreateDomain($"tmpdomain_{DateTime.Now.Ticks:x16}"); // prevents caching when loading the assembly
	byte[] coff = File.ReadAllBytes(base_path + ".dll");
	byte[] pdb = File.ReadAllBytes(base_path + ".pdb");

	asm = domain.Load(coff, pdb);
}
else
	asm = Assembly.LoadFrom(base_path + ".dll");

Type ot = asm.GetType("MCPU.OPCode");
StringBuilder sb1 = new StringBuilder();
StringBuilder sb2 = new StringBuilder();

foreach (Type t in asm.GetTypes())
	if (ot.IsAssignableFrom(t) && !t.IsAbstract)
	{
		var ins = Activator.CreateInstance(t);
		var num = (ushort)t.GetProperty("Number").GetValue(ins);
		var name = t.Name.ToLower();
		var tok = name.ToUpper();
		
		name = name == "in" ? "@in"
			 : name == "out" ? "@out"
			 : name == "int" ? "@int"
			 : name == "bool" ? "@bool"
	         : name;

	    if (num <= 0xffff)
			sb1.AppendLine($"            {{ (ushort){num}, {tok} }},");   // [{asm.GetName().Name}] {t.FullName}
			
		sb2.AppendLine($"            {{ \"{tok.ToLower()}\", {tok} }},");
#>
        /// <summary>
        /// Represents the OP code "<#= tok #>" (0x<#= num.ToString("x8") #>)
        /// </summary>
<#
		WriteLine(($"        public static {name} {tok} {{ get; }}".PadRight(48, ' ') + $" = new {name}();").PadRight(70, ' '));
	}
#>


        /// <summary>
        /// A collection of all opcodes mapped to their code number
        /// </summary>
        public static Dictionary<ushort, OPCode> CodesByID { get; } = new Dictionary<ushort, OPCode>() {
<#= sb1.ToString() #>        };
	
        /// <summary>
        /// A collection of all opcodes mapped to their token string
        /// </summary>
        public static Dictionary<string, OPCode> CodesByToken { get; } = new Dictionary<string, OPCode>() {
<#= sb2.ToString() #>        };
	}
}
<#
if (USE_APPDOMAIN)
	AppDomain.Unload(domain);
#>